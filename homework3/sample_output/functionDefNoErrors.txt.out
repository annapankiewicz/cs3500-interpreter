
___Entering new scope...

TOKEN: IDENT 		 LEXEME: teal
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
TOKEN: FUNCTION 		 LEXEME: function
TOKEN: LPAREN 		 LEXEME: (

___Entering new scope...

TOKEN: IDENT 		 LEXEME: start
TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: middle
TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: end
TOKEN: RPAREN 		 LEXEME: )
PARAMS -> IDENT
___Adding end to symbol table
PARAMS -> IDENT, PARAMS
___Adding middle to symbol table
PARAMS -> IDENT, PARAMS
___Adding start to symbol table
PARAM_LIST -> PARAMS
TOKEN: LBRACE 		 LEXEME: {

___Entering new scope...

TOKEN: IDENT 		 LEXEME: start
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
TOKEN: IDENT 		 LEXEME: middle
TOKEN: SEMICOLON 		 LEXEME: ;
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding start to symbol table
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT 		 LEXEME: middle
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
TOKEN: IDENT 		 LEXEME: end
TOKEN: SEMICOLON 		 LEXEME: ;
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding middle to symbol table
EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT 		 LEXEME: end
TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon
TOKEN: INTCONST 		 LEXEME: 7
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding end to symbol table
EXPR -> ASSIGNMENT_EXPR
TOKEN: IF 		 LEXEME: if
TOKEN: LPAREN 		 LEXEME: (
TOKEN: INTCONST 		 LEXEME: 17
CONST -> INTCONST
FACTOR -> CONST
TOKEN: SUB 		 LEXEME: -
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> -
TOKEN: IDENT 		 LEXEME: start
TOKEN: GT 		 LEXEME: >
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >
TOKEN: INTCONST 		 LEXEME: 0
CONST -> INTCONST
FACTOR -> CONST
TOKEN: RPAREN 		 LEXEME: )
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
TOKEN: LBRACE 		 LEXEME: {

___Entering new scope...

TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: middle
TOKEN: ADD 		 LEXEME: +
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP -> +
TOKEN: IDENT 		 LEXEME: end
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
TOKEN: ELSE 		 LEXEME: else
TOKEN: LBRACE 		 LEXEME: {

___Entering new scope...

TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: start
TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR
FACTOR -> VAR
MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR
TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR
IF_EXPR -> IF ( EXPR ) ELSE EXPR
EXPR -> IF_EXPR
TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }
FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR

___Exiting scope...

EXPR -> FUNCTION_DEF
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding teal to symbol table
EXPR -> ASSIGNMENT_EXPR
START -> EXPR

___Exiting scope...


---- Completed parsing ----

